CREATE OR REPLACE PACKAGE MSP_APRHI.PCK_MUESTRAS AS 
/* TODO enter package declarations (types, exceptions, methods etc) here */ 
TYPE tipoCabeceraAnalisis IS REF CURSOR; 
TYPE tipoCuerpoAnalisis IS REF CURSOR; 
TYPE tipoMuestra IS REF CURSOR; 
TYPE tipoDetMuestra IS REF CURSOR; 
TYPE tipoEstadoMuestra IS REF CURSOR; 
------------------------------------- --AGREGADO DESDE AQUI ------------------------------------- 
TYPE tipoSolicitante IS REF CURSOR; 
TYPE tipoDestEfluente IS REF CURSOR; 
TYPE tipoCondLlegada IS REF CURSOR; 
TYPE tipoDocs IS REF CURSOR; 
PROCEDURE PR_FILTRAR_TIPOS_COND_LLEGADA(vNombre IN VARCHAR2, cTipoCondLlegada OUT PCK_MUESTRAS.tipoCondLlegada); PROCEDURE PR_FILTRAR_DEST_EFLUENTE(vNombre IN VARCHAR2, cDestEfluente OUT PCK_MUESTRAS.tipoDestEfluente); PROCEDURE PR_FILTRAR_TIPO_SOLICITANTE(vNombre IN VARCHAR2, vHabilitado IN NUMBER, cTipoSolicitante OUT PCK_MUESTRAS.tipoSolicitante); PROCEDURE PR_EDITAR_MUESTRA(idMuestra IN OUT NUMBER, idTipoMuestra IN NUMBER, vNro IN NUMBER, vTemp IN NUMBER, idDestEfluente IN NUMBER, idTipoSolicitante IN NUMBER, vProf IN NUMBER, vFechaExt IN DATE, vHsExt IN DATE, idPersonaExt IN NUMBER, vCuilPerExt IN VARCHAR2, idSexoPerExt IN VARCHAR2, vDniPerExt IN VARCHAR2, vPaiCodPaisPerExt IN VARCHAR2, idNumeroPerExt IN NUMBER, vObservacSitioExt IN VARCHAR2, idCampania IN NUMBER, idLocalidadProced IN NUMBER, vObservacProced IN VARCHAR2, vProgramado IN NUMBER, idTipoCondLlegada IN NUMBER, vFechaRecepcion IN DATE, vLat IN VARCHAR2, vLng IN VARCHAR2, vObservac IN VARCHAR2, vObservacFuente IN VARCHAR2, vVisibleLabo IN NUMBER, vCuitLabo IN VARCHAR2, vEstadoMuestra IN VARCHAR2, vCuilModifica IN VARCHAR2); PROCEDURE PR_EDITAR_MUESTRA(idMuestra IN OUT NUMBER, vNro IN NUMBER, vTemp IN NUMBER, idDestEfluente IN NUMBER, idTipoSolicitante IN NUMBER, vProf IN NUMBER, vFechaExt IN DATE, vHsExt IN DATE, idPersonaExt IN NUMBER, vCuilPerExt IN VARCHAR2, idSexoPerExt IN VARCHAR2, vDniPerExt IN VARCHAR2, vPaiCodPaisPerExt IN VARCHAR2, idNumeroPerExt IN NUMBER, vObservacSitioExt IN VARCHAR2, idCampania IN NUMBER, idLocalidadProced IN NUMBER, vObservacProced IN VARCHAR2, vProgramado IN NUMBER, idTipoCondLlegada IN NUMBER, vFechaRecepcion IN DATE, vLat IN VARCHAR2, vLng IN VARCHAR2, vObservac IN VARCHAR2, vObservacFuente IN VARCHAR2, vVisibleLabo IN NUMBER, vCuitLabo IN VARCHAR2, vEstadoMuestra IN VARCHAR2, vCuilModifica IN VARCHAR2, idSubtipoCampania IN NUMBER, idSitioExtraccion IN NUMBER); PROCEDURE PR_FILTRAR_MUESTRAS(cMuestra OUT PCK_MUESTRAS.tipoMuestra); 
PROCEDURE PR_OBTENER_MUESTRA(idMuestra IN NUMBER, cMuestra OUT PCK_MUESTRAS.tipoMuestra); 
PROCEDURE PR_OBTENER_DET_MUESTRA(idMuestra IN NUMBER, idReso IN NUMBER, idPlantilla IN NUMBER, cDetMuestra OUT PCK_MUESTRAS.tipoDetMuestra, cCabeceras OUT PCK_MUESTRAS.tipoCabeceraAnalisis); PROCEDURE PR_ACTUALIZAR_DET_MUESTRA(vDetMuestraXML IN CLOB); PROCEDURE PR_OBTENER_TIPOS_SOLICITANTE(idMuestra IN NUMBER, cMuestra OUT PCK_MUESTRAS.tipoMuestra); PROCEDURE PR_FILTRAR_MUESTRA_CAMPANIA(vFechaDesde IN DATE, vFechaHasta IN DATE, idCampania IN NUMBER, idMuestra IN NUMBER, cMuestra OUT PCK_MUESTRAS.tipoMuestra); PROCEDURE PR_BORRAR_MUESTRA(idMuestra IN NUMBER); PROCEDURE PR_BUSCAR_DOCUMENTOS(idMuestra IN NUMBER, cDocs OUT PCK_MUESTRAS.tipoDocs); PROCEDURE PR_ACTUALIZAR_DOC_CDD(idMuestra IN NUMBER, idDocumento IN NUMBER, vCodCdd IN NUMBER, vNcodCdd IN VARCHAR2, vNarchivo IN VARCHAR2); 
PROCEDURE PR_BORRAR_DOC_CDD(idArchivo IN NUMBER); 
END PCK_MUESTRAS; 

CREATE OR REPLACE PACKAGE BODY MSP_APRHI.PCK_MUESTRAS AS 
PROCEDURE PR_FILTRAR_TIPOS_COND_LLEGADA(vNombre IN VARCHAR2, cTipoCondLlegada OUT PCK_MUESTRAS.tipoCondLlegada) AS BEGIN OPEN cTipoCondLlegada FOR SELECT tCondLlega.ID_TIPO_COND_LLEGA, tCondLlega.N_TIPO_COND_LLEGA FROM T_TIPOS_COND_LLEGA tCondLlega WHERE (vNombre IS NULL OR tCondLlega.N_TIPO_COND_LLEGA LIKE '%' || vNombre || '%') ORDER BY tCondLlega.N_TIPO_COND_LLEGA; EXCEPTION WHEN OTHERS THEN IF cTipoCondLlegada%ISOPEN THEN CLOSE cTipoCondLlegada; END IF; RAISE_APPLICATION_ERROR(-20001,'OCURRIO UN ERROR EN PR_FILTRAR_TIPOS_COND_LLEGADA - '||SQLCODE||' -ERROR- '||SQLERRM); 
END PR_FILTRAR_TIPOS_COND_LLEGADA; 

PROCEDURE PR_FILTRAR_DEST_EFLUENTE(vNombre IN VARCHAR2, cDestEfluente OUT PCK_MUESTRAS.tipoDestEfluente) AS BEGIN OPEN cDestEfluente FOR SELECT tDestEfluente.ID_DEST_EFLUENTE, tDestEfluente.N_DEST_EFLUENTE, tDestEfluente.DESCRIPCION FROM T_DEST_EFLUENTE tDestEfluente WHERE (vNombre IS NULL OR tDestEfluente.N_DEST_EFLUENTE LIKE '%' || vNombre || '%') ORDER BY tDestEfluente.N_DEST_EFLUENTE; EXCEPTION WHEN OTHERS THEN IF cDestEfluente%ISOPEN THEN CLOSE cDestEfluente; END IF; RAISE_APPLICATION_ERROR(-20001,'OCURRIO UN ERROR EN PR_FILTRAR_DEST_EFLUENTE - '||SQLCODE||' -ERROR- '||SQLERRM); 
END PR_FILTRAR_DEST_EFLUENTE; 

PROCEDURE PR_FILTRAR_TIPO_SOLICITANTE(vNombre IN VARCHAR2, vHabilitado IN NUMBER, cTipoSolicitante OUT PCK_MUESTRAS.tipoSolicitante) AS BEGIN OPEN cTipoSolicitante FOR SELECT ttipoSol.ID_TIPO_SOLICITANTE, ttipoSol.N_TIPO_SOLICITANTE, ttipoSol.HABILITADO FROM T_TIPOS_SOLICITANTE ttipoSol WHERE (vNombre IS NULL OR ttipoSol.N_TIPO_SOLICITANTE LIKE '%' || vNombre || '%') AND (vHabilitado IS NULL OR ttipoSol.HABILITADO = vHabilitado) ORDER BY ttipoSol.N_TIPO_SOLICITANTE; EXCEPTION WHEN OTHERS THEN IF cTipoSolicitante%ISOPEN THEN CLOSE cTipoSolicitante; END IF; RAISE_APPLICATION_ERROR(-20001,'OCURRIO UN ERROR EN PR_FILTRAR_TIPO_SOLICITANTE - '||SQLCODE||' -ERROR- '||SQLERRM); 
END PR_FILTRAR_TIPO_SOLICITANTE; 

PROCEDURE PR_EDITAR_MUESTRA(idMuestra IN OUT NUMBER, idTipoMuestra IN NUMBER, vNro IN NUMBER, vTemp IN NUMBER, idDestEfluente IN NUMBER, idTipoSolicitante IN NUMBER, vProf IN NUMBER, vFechaExt IN DATE, vHsExt IN DATE, idPersonaExt IN NUMBER, vCuilPerExt IN VARCHAR2, idSexoPerExt IN VARCHAR2, vDniPerExt IN VARCHAR2, vPaiCodPaisPerExt IN VARCHAR2, idNumeroPerExt IN NUMBER, vObservacSitioExt IN VARCHAR2, idCampania IN NUMBER, idLocalidadProced IN NUMBER, vObservacProced IN VARCHAR2, vProgramado IN NUMBER, idTipoCondLlegada IN NUMBER, vFechaRecepcion IN DATE, vLat IN VARCHAR2, vLng IN VARCHAR2, vObservac IN VARCHAR2, vObservacFuente IN VARCHAR2, vVisibleLabo IN NUMBER, vCuitLabo IN VARCHAR2, vEstadoMuestra IN VARCHAR2, vCuilModifica IN VARCHAR2) AS idPerExt INTEGER; idEstado NUMBER; idEstadoMuestra NUMBER; vNombreEstado VARCHAR2(20); vDescEstado VARCHAR2(200); tabla_estados_no_cargada EXCEPTION; BEGIN SET TRANSACTION READ WRITE; BEGIN SELECT DISTINCT te.ID_ESTADO, te.N_ESTADO, te.DESCRIPCION INTO idEstado, vNombreEstado, vDescEstado FROM T_ESTADOS te WHERE te.N_ESTADO LIKE UPPER(TRIM(vEstadoMuestra)); EXCEPTION WHEN NO_DATA_FOUND THEN idEstado := -1; vNombreEstado := NULL; vDescEstado := NULL; RAISE tabla_estados_no_cargada; END; --Verifico si la persona que extrajo esta en nuestra tabla persona, sino esta la inserto BEGIN SELECT DISTINCT tper.ID_PERSONA INTO idPerExt FROM T_PERSONAS tper WHERE tper.NRO_DOCUMENTO = vDniPerExt AND tper.ID_SEXO = idPersonaExt AND tper.PAI_COD_PAIS = vPaiCodPaisPerExt; EXCEPTION WHEN NO_DATA_FOUND THEN idPerExt := SEQ_PERSONAS.NEXTVAL; INSERT INTO T_PERSONAS(ID_PERSONA, ID_SEXO, NRO_DOCUMENTO, PAI_COD_PAIS, ID_NUMERO) VALUES(idPerExt, idSexoPerExt, vDniPerExt, vPaiCodPaisPerExt, idNumeroPerExt); END; IF idMuestra > -1 THEN UPDATE T_MUESTRAS_ANALISIS ma SET --ma.ID_TIPO_MUESTRA = idTipoMuestra, ma.NRO = vNro, ma.TEMPERATURA = vTemp, ma.ID_DEST_EFLUENTE = idDestEfluente, ma.ID_TIPO_SOLICITANTE = idTipoSolicitante, ma.PROF_MUESTRA_ANALISIS = vProf, ma.FEC_EXTRACCION = vFechaExt, ma.HS_EXTRACCION = vHsExt, ma.ID_PERSONA_EXTRACCION = idPerExt, ma.OBSERV_SITIO_EXTRACCION = UPPER(TRIM(vObservacSitioExt)), ma.ID_CAMPANIA = idCampania, ma.ID_LOC_PROCEDENCIA = idLocalidadProced, ma.OBSERV_PROCEDENCIA = UPPER(TRIM(vObservacProced)), ma.PROGRAMADO = vProgramado, ma.ID_TIPO_COND_LLEGA = idTipoCondLlegada, ma.FEC_RECEPCION = vFechaRecepcion, ma.LAT = vLat, ma.LNG = vLng, ma.OBSERVACIONES = UPPER(TRIM(vObservac)), ma.OBSERV_FUENTE = UPPER(TRIM(vObservacFuente)), ma.VISIBLE_LABORATORIO = vVisibleLabo, ma.CUIT_LABORATORIO = vCuitLabo WHERE ma.ID_MUESTRA_ANALISIS = idMuestra; UPDATE T_ESTADOS_MUESTRA tem SET tem.ID_ESTADO = idEstado WHERE tem.ID_MUESTRA_ANALISIS = idMuestra; ELSE idMuestra := SEQ_MUESTRAS_ANALISIS.NEXTVAL; INSERT INTO T_MUESTRAS_ANALISIS(ID_MUESTRA_ANALISIS, --ID_TIPO_MUESTRA, NRO, TEMPERATURA, ID_DEST_EFLUENTE, ID_TIPO_SOLICITANTE, PROF_MUESTRA_ANALISIS, FEC_EXTRACCION, HS_EXTRACCION, ID_PERSONA_EXTRACCION, OBSERV_SITIO_EXTRACCION, ID_CAMPANIA, ID_LOC_PROCEDENCIA, OBSERV_PROCEDENCIA, PROGRAMADO, ID_TIPO_COND_LLEGA, FEC_RECEPCION, LAT, LNG, OBSERVACIONES, OBSERV_FUENTE, VISIBLE_LABORATORIO, CUIT_LABORATORIO) VALUES (idMuestra, --idTipoMuestra, vNro, vTemp, idDestEfluente, idTipoSolicitante, vProf, vFechaExt, vHsExt, idPerExt, UPPER(TRIM(vObservacSitioExt)), idCampania, idLocalidadProced, UPPER(TRIM(vObservacProced)), vProgramado, idTipoCondLlegada, vFechaRecepcion, vLat, vLng, UPPER(TRIM(vObservac)), UPPER(TRIM(vObservacFuente)), vVisibleLabo, vCuitLabo); idEstadoMuestra := SEQ_ESTADOS_MUESTRA.NEXTVAL; INSERT INTO T_ESTADOS_MUESTRA(ID_ESTADO_MUESTRA, ID_ESTADO, ID_MUESTRA_ANALISIS) VALUES (idEstadoMuestra, idEstado, idMuestra); END IF; --INSERTAMOS EN EL HISTORICO DE MUESTRAS DE ANALISIS INSERT INTO T_HIST_MUESTRA(ID_HIST_MUESTRA, ID_MUESTRA_ANALISIS, FEC_MODIF, ID_USUARIO) VALUES(SEQ_HIST_MUESTRA.NEXTVAL, idMuestra, SYSDATE, vCuilModifica); COMMIT; EXCEPTION WHEN tabla_estados_no_cargada THEN ROLLBACK; RAISE_APPLICATION_ERROR(-20002,'OCURRIO UN ERROR EN PR_EDITAR_MUESTRA (TABLA ESTADOS NO CARGADA) - '||SQLCODE||' -ERROR- '||SQLERRM); WHEN OTHERS THEN ROLLBACK; RAISE_APPLICATION_ERROR(-20001,'OCURRIO UN ERROR EN PR_EDITAR_MUESTRA - '||SQLCODE||' -ERROR- '||SQLERRM); 
END PR_EDITAR_MUESTRA; 

PROCEDURE PR_FILTRAR_MUESTRAS(cMuestra OUT PCK_MUESTRAS.tipoMuestra) AS BEGIN OPEN cMuestra FOR SELECT tma.ID_MUESTRA_ANALISIS, TO_CHAR(tma.FEC_EXTRACCION, 'DD/MM/YYYY') AS FECHA, tma.NRO, tma.PROGRAMADO, TO_CHAR(tma.HS_EXTRACCION, 'HH24:MI') AS HORA, TO_CHAR(tma.FEC_RECEPCION, 'DD/MM/YYYY') AS FECHA_RECEPCION, tma.OBSERVACIONES, tma.LAT, tma.LNG, te.ID_ESTADO, te.N_ESTADO, te.DESCRIPCION, tl.CUIT_LABORATORIO, pj.RAZON_SOCIAL, ------VER EL SPLIT ON DE DAPPER CUANDO SE LLAME A ESTE PROCEDURE ts.ID_TIPO_SOLICITANTE, ts.N_TIPO_SOLICITANTE, ts.HABILITADO, tma.ID_PERSONA_EXTRACCION, tper.CUIL, tper.ID_SEXO, tper.NRO_DOCUMENTO, tper.PAI_COD_PAIS, tper.ID_NUMERO, PCK_USUARIOS.F_APELLIDO_PER(tper.ID_SEXO, tper.NRO_DOCUMENTO, tper.PAI_COD_PAIS, tper.ID_NUMERO) AS APELLIDO, PCK_USUARIOS.F_NOMBRE_PER(tper.ID_SEXO, tper.NRO_DOCUMENTO, tper.PAI_COD_PAIS, tper.ID_NUMERO) AS NOMBRE, loc.ID_LOCALIDAD, loc.N_LOCALIDAD, loc.ID_PROVINCIA, dto.ID_DEPARTAMENTO, dto.N_DEPARTAMENTO FROM T_MUESTRAS_ANALISIS tma, T_LABORATORIOS tl, T_TIPOS_SOLICITANTE ts, VT_PERSONAS tper, DOM_MANAGER.VT_LOCALIDADES loc, DOM_MANAGER.VT_DEPARTAMENTOS dto, T_COMUNES.VT_PERS_JURIDICAS_UNICA pj, T_ESTADOS_MUESTRA tem, T_ESTADOS te WHERE tma.CUIT_LABORATORIO = tl.CUIT_LABORATORIO AND tl.HABILITADO = 1 AND ts.ID_TIPO_SOLICITANTE = tma.ID_TIPO_SOLICITANTE AND tper.ID_PERSONA = tma.ID_PERSONA_EXTRACCION AND tma.ID_LOC_PROCEDENCIA = loc.ID_LOCALIDAD AND loc.ID_DEPARTAMENTO = dto.ID_DEPARTAMENTO AND tem.ID_MUESTRA_ANALISIS = tma.ID_MUESTRA_ANALISIS AND tem.ID_ESTADO = te.ID_ESTADO AND tl.CUIT_LABORATORIO = pj.CUIT ORDER BY tma.FEC_EXTRACCION, tma.HS_EXTRACCION; EXCEPTION WHEN OTHERS THEN IF cMuestra%ISOPEN THEN CLOSE cMuestra; END IF; RAISE_APPLICATION_ERROR(-20001,'OCURRIO UN ERROR EN PR_FILTRAR_MUESTRAS - '||SQLCODE||' -ERROR- '||SQLERRM); 
END PR_FILTRAR_MUESTRAS; 

PROCEDURE PR_OBTENER_MUESTRA(idMuestra IN NUMBER, cMuestra OUT PCK_MUESTRAS.tipoMuestra) AS idMue NUMBER(10) := idMuestra; BEGIN OPEN cMuestra FOR SELECT tma.ID_MUESTRA_ANALISIS, TO_CHAR(tma.FEC_EXTRACCION, 'DD/MM/YYYY') AS FEC_EXTRACCION, tma.NRO, tma.PROGRAMADO, TO_CHAR(tma.HS_EXTRACCION, 'HH24:MI') AS HS_EXTRACCION, TO_CHAR(tma.FEC_RECEPCION, 'DD/MM/YYYY') AS FECHA_RECEPCION, tma.OBSERVACIONES, tma.OBSERV_SITIO_EXTRACCION, tma.LAT, tma.LNG, tma.TEMPERATURA, tma.PROF_MUESTRA_ANALISIS, tcamp.ID_CAMPANIA, tcamp.N_CAMPANIA, ttcamp.ID_TIPO_CAMPANIA, ttcamp.N_TIPO_CAMPANIA, te.ID_ESTADO, te.N_ESTADO, te.DESCRIPCION, tl.CUIT_LABORATORIO, pj.RAZON_SOCIAL, ----VER EL SPLIT ON CUANDO SE LLAMA A ESTE PROCEDURE ts.ID_TIPO_SOLICITANTE, ts.N_TIPO_SOLICITANTE, ts.HABILITADO, tma.ID_PERSONA_EXTRACCION, tper.CUIL, tper.ID_SEXO, tper.NRO_DOCUMENTO, tper.PAI_COD_PAIS, tper.ID_NUMERO, PCK_USUARIOS.F_APELLIDO_PER(tper.ID_SEXO, tper.NRO_DOCUMENTO, tper.PAI_COD_PAIS, tper.ID_NUMERO) AS APELLIDO, PCK_USUARIOS.F_NOMBRE_PER(tper.ID_SEXO, tper.NRO_DOCUMENTO, tper.PAI_COD_PAIS, tper.ID_NUMERO) AS NOMBRE, loc.ID_LOCALIDAD, loc.N_LOCALIDAD, loc.ID_PROVINCIA, dto.ID_DEPARTAMENTO, dto.N_DEPARTAMENTO, tsit.ID_SITIO_EXTRACCION, tsit.N_SITIO_EXTRACCION, trec.ID_RECURSO_HIDRICO, trec.N_RECURSO_HIDRICO, trec.ID_SUBCUENCA, trec.N_SUBCUENCA, trec.ID_CUENCA, trec.N_CUENCA FROM T_MUESTRAS_ANALISIS tma, T_LABORATORIOS tl, T_TIPOS_SOLICITANTE ts, VT_PERSONAS tper, DOM_MANAGER.VT_LOCALIDADES loc, DOM_MANAGER.VT_DEPARTAMENTOS dto, T_COMUNES.VT_PERS_JURIDICAS_UNICA pj, T_ESTADOS_MUESTRA tem, T_ESTADOS te, T_CAMPANIAS tcamp, T_TIPOS_CAMPANIA ttcamp, T_SITIOS_EXTRACCION tsit, T_SITIOS_MUESTRA tsitmue, T_COMUNES.VT_RECURSOS_HIDRICOS trec WHERE tma.CUIT_LABORATORIO = tl.CUIT_LABORATORIO AND ts.ID_TIPO_SOLICITANTE = tma.ID_TIPO_SOLICITANTE AND tper.ID_PERSONA = tma.ID_PERSONA_EXTRACCION AND tma.ID_LOC_PROCEDENCIA = loc.ID_LOCALIDAD AND loc.ID_DEPARTAMENTO = dto.ID_DEPARTAMENTO AND tl.CUIT_LABORATORIO = pj.CUIT AND tem.ID_MUESTRA_ANALISIS = tma.ID_MUESTRA_ANALISIS AND tem.ID_ESTADO = te.ID_ESTADO AND tma.ID_CAMPANIA = tcamp.ID_CAMPANIA AND tcamp.ID_TIPO_CAMPANIA = ttcamp.ID_TIPO_CAMPANIA AND tma.ID_MUESTRA_ANALISIS = tsitmue.ID_MUESTRA_ANALISIS AND tsit.ID_SITIO_EXTRACCION = tsitmue.ID_SITIO_EXTRACCION AND tsit.ID_RECURSO_HIDRICO = trec.ID_RECURSO_HIDRICO AND tma.ID_MUESTRA_ANALISIS = idMue ORDER BY tma.FEC_EXTRACCION; EXCEPTION WHEN OTHERS THEN IF cMuestra%ISOPEN THEN CLOSE cMuestra; END IF; RAISE_APPLICATION_ERROR(-20001,'OCURRIO UN ERROR EN PR_OBTENER_MUESTRA - '||SQLCODE||' -ERROR- '||SQLERRM); 
END PR_OBTENER_MUESTRA; 

PROCEDURE PR_OBTENER_DET_MUESTRA(idMuestra IN NUMBER, idReso IN NUMBER, idPlantilla IN NUMBER, cDetMuestra OUT PCK_MUESTRAS.tipoDetMuestra, cCabeceras OUT PCK_MUESTRAS.tipoCabeceraAnalisis) AS hayDetMuestraPlanti INTEGER; idDetalleAnalisis NUMBER; CURSOR cElemenCuerpo IS SELECT tecp.ID_ELEMENTO_CUERPO_PLANTILLA, tecu.ID_ELEMENTO_CUERPO, tecu.VALOR_DESDE from T_ELEMENTOS_CUERPO tecu, T_ELEMENTOS_CUERPO_PLANTILLA tecp, T_ELEMENTOS_CABECERA_PLANTILLA tcp, T_PLANTILLAS_ANALISIS tp where tecu.ID_ELEMENTO_CUERPO = tecp.ID_ELEMENTO_CUERPO and tecu.ID_ELEMENTO_CABECERA_PLANTILLA = tcp.ID_ELEMENTO_CABECERA_PLANTILLA and tcp.ID_PLANTILLA_ANALISIS = tp.ID_PLANTILLA_ANALISIS and tp.ID_PLANTILLA_ANALISIS = idPlantilla and tp.ID_RESOLUCION = idReso and tcp.ES_DESDE = 0 and tcp.ES_HASTA = 0 and tcp.ES_MEDIBLE = 0 and tcp.ES_UMED = 0 and tcp.ORDEN = 1; BEGIN SET TRANSACTION READ WRITE; /*Primero debo preguntar si hay detalles en la tabla T_DETALLES_ANALISIS para esa muestra, resolucion y plantilla. Si no hay debo insertar con resultado igual a cero tantos detalles como cuerpos[id_elementos_cuerpo_plantilla] (filas) posea la plantilla en cuestion */ SELECT COUNT(tecu.ID_ELEMENTO_CUERPO) INTO hayDetMuestraPlanti FROM T_ELEMENTOS_CUERPO tecu, T_ELEMENTOS_CUERPO_PLANTILLA tecp, T_ELEMENTOS_CABECERA_PLANTILLA tcp, T_PLANTILLAS_ANALISIS tp, T_PLANTILLAS_MUESTRA tm, T_MUESTRAS_ANALISIS tma, T_DETALLES_ANALISIS tda WHERE tecu.ID_ELEMENTO_CUERPO = tecp.ID_ELEMENTO_CUERPO AND tecu.ID_ELEMENTO_CABECERA_PLANTILLA = tcp.ID_ELEMENTO_CABECERA_PLANTILLA AND tcp.ID_PLANTILLA_ANALISIS = tp.ID_PLANTILLA_ANALISIS AND tm.ID_PLANTILLA_ANALISIS = tp.ID_PLANTILLA_ANALISIS AND tda.ID_MUESTRA_ANALISIS = tma.ID_MUESTRA_ANALISIS AND tm.ID_MUESTRA_ANALISIS = tma.ID_MUESTRA_ANALISIS AND tp.ID_PLANTILLA_ANALISIS = idPlantilla AND tp.ID_RESOLUCION = idReso AND tm.ID_MUESTRA_ANALISIS = idMuestra; IF hayDetMuestraPlanti = 0 THEN --Inserto la relacion entre la muestra y la plantilla correspondiente en T_PLANTILLAS_MUESTRAS INSERT INTO T_PLANTILLAS_MUESTRA(ID_PLANTILLA_MUESTRA, ID_MUESTRA_ANALISIS, ID_PLANTILLA_ANALISIS) VALUES(SEQ_PLANTILLAS_MUESTRA.NEXTVAL, idMuestra, idPlantilla); --Inserto detalles vacios para una muestra y plantilla determinada FOR elementoCuerpo IN cElemenCuerpo LOOP idDetalleAnalisis := SEQ_DETALLES_ANALISIS.NEXTVAL; INSERT INTO T_DETALLES_ANALISIS(ID_DETALLE_ANALISIS, RLTDO_CAMPO, RLTDO_LABORATORIO, ID_MUESTRA_ANALISIS, ID_ELEMENTO_CUERPO_PLANTILLA) VALUES(idDetalleAnalisis, 0.0, 0.0, idMuestra, elementoCuerpo.ID_ELEMENTO_CUERPO_PLANTILLA); END LOOP; END IF; --CLOSE cElemenCuerpo; --Obtengo las cabeceras de una plantilla determinada para estos detalles de muestra OPEN cCabeceras FOR SELECT ECA.ID_ELEMENTO_CABECERA, ECA.N_ELEMENTO_CABECERA, ECP.ES_MEDIBLE, ECP.ES_DESDE, ECP.ES_HASTA, ECP.ORDEN FROM T_ELEMENTOS_CABECERA_PLANTILLA ECP, T_ELEMENTOS_CABECERA ECA, T_PLANTILLAS_ANALISIS PA, T_RESOLUCIONES RE WHERE PA.ID_PLANTILLA_ANALISIS = ECP.ID_PLANTILLA_ANALISIS AND ECA.ID_ELEMENTO_CABECERA = ECP.ID_ELEMENTO_CABECERA AND RE.ID_RESOLUCION = PA.ID_RESOLUCION AND PA.ID_PLANTILLA_ANALISIS = idPlantilla AND RE.ID_RESOLUCION = idReso ORDER BY ECP.ORDEN ASC; --Obtengo los "detalles de muestra" vinculando los cuerpos de una plantilla con los registros verdaderos --de la tabla T_DETALLES_ANALISIS. Para esto debo transformar (transponer) las filas (registros) de los cuerpos de las --plantillas en columnas. Ver el ejemplo online de: http://oraclecoder.com/tutorials/three-ways-to-transpose-rows-into-columns-in-oracle-sql--160 OPEN cDetMuestra FOR WITH miQuery AS ( SELECT tecp.FILA, tcp.ORDEN, tecu.VALOR_DESDE, tecu.VALOR_HASTA, tecp.ID_ELEMENTO_CUERPO, tecp.ID_ELEMENTO_CUERPO_PLANTILLA, tcp.ES_MEDIBLE, tcp.ES_DESDE, tcp.ES_HASTA, tcp.ES_UMED, --tecu.ES_CRITICO, (SELECT tda1.SIGNO_RLTDO_CAMP FROM T_DETALLES_ANALISIS tda1 WHERE tda1.ID_ELEMENTO_CUERPO_PLANTILLA = tecp.ID_ELEMENTO_CUERPO_PLANTILLA AND tda1.ID_MUESTRA_ANALISIS = idMuestra) AS SIGNO_RLTDO_CAMP, (SELECT tda1.RLTDO_CAMPO FROM T_DETALLES_ANALISIS tda1 WHERE tda1.ID_ELEMENTO_CUERPO_PLANTILLA = tecp.ID_ELEMENTO_CUERPO_PLANTILLA AND tda1.ID_MUESTRA_ANALISIS = idMuestra) AS RLTDO_CAMPO, (SELECT tda1.SIGNO_RLTDO_LABO FROM T_DETALLES_ANALISIS tda1 WHERE tda1.ID_ELEMENTO_CUERPO_PLANTILLA = tecp.ID_ELEMENTO_CUERPO_PLANTILLA AND tda1.ID_MUESTRA_ANALISIS = idMuestra) AS SIGNO_RLTDO_LABO, (SELECT tda1.RLTDO_LABORATORIO FROM T_DETALLES_ANALISIS tda1 WHERE tda1.ID_ELEMENTO_CUERPO_PLANTILLA = tecp.ID_ELEMENTO_CUERPO_PLANTILLA AND tda1.ID_MUESTRA_ANALISIS = idMuestra) AS RLTDO_LABORATORIO, (SELECT tda2.ID_DETALLE_ANALISIS FROM T_DETALLES_ANALISIS tda2 WHERE tda2.ID_ELEMENTO_CUERPO_PLANTILLA = tecp.ID_ELEMENTO_CUERPO_PLANTILLA AND tda2.ID_MUESTRA_ANALISIS = idMuestra) AS ID_DETALLE_ANALISIS FROM T_ELEMENTOS_CUERPO tecu, T_ELEMENTOS_CUERPO_PLANTILLA tecp, T_ELEMENTOS_CABECERA_PLANTILLA tcp, T_PLANTILLAS_ANALISIS tpa, T_PLANTILLAS_MUESTRA tpm, T_MUESTRAS_ANALISIS tma WHERE tpm.ID_PLANTILLA_ANALISIS = tpa.ID_PLANTILLA_ANALISIS AND tpm.ID_MUESTRA_ANALISIS = tma.ID_MUESTRA_ANALISIS AND tecu.ID_ELEMENTO_CUERPO = tecp.ID_ELEMENTO_CUERPO AND tecu.ID_ELEMENTO_CABECERA_PLANTILLA = tcp.ID_ELEMENTO_CABECERA_PLANTILLA AND tpa.ID_PLANTILLA_ANALISIS = tcp.ID_PLANTILLA_ANALISIS AND tpa.ID_PLANTILLA_ANALISIS = idPlantilla AND tpa.ID_RESOLUCION = idReso AND tpm.ID_MUESTRA_ANALISIS = idMuestra GROUP BY tecp.FILA, tcp.ORDEN, tecu.VALOR_DESDE, tecu.VALOR_HASTA, tecp.ID_ELEMENTO_CUERPO, tecp.ID_ELEMENTO_CUERPO_PLANTILLA, tcp.ES_MEDIBLE, tcp.ES_DESDE, tcp.ES_HASTA, tcp.ES_UMED --,tecu.ES_CRITICO ORDER BY tecp.FILA, tcp.ORDEN ) SELECT (SELECT y.VALOR_DESDE FROM miQuery y WHERE y.FILA = x.FILA AND y.ORDEN = 1 AND y.ES_UMED = 0 AND y.ES_MEDIBLE = 0 AND y.ES_DESDE = 0 AND y.ES_HASTA = 0) AS ELEMENTO_PARAMETRO, (SELECT y.VALOR_DESDE FROM miQuery y WHERE y.FILA = x.FILA AND y.ORDEN = 2 AND y.ES_UMED = 0 AND y.ES_MEDIBLE = 0 AND y.ES_DESDE = 0 AND y.ES_HASTA = 0) AS FUENTE, (SELECT y.VALOR_DESDE FROM miQuery y WHERE y.FILA = x.FILA AND y.ORDEN = 3 AND y.ES_UMED = 0 AND y.ES_MEDIBLE = 0 AND y.ES_DESDE = 0 AND y.ES_HASTA = 0) AS SABOR_OLOR, (SELECT y.VALOR_DESDE FROM miQuery y WHERE y.FILA = x.FILA AND y.ES_UMED = 1 AND y.ES_MEDIBLE = 0 AND y.ES_DESDE = 0 AND y.ES_HASTA = 0) AS UNIDAD_MEDIDA, (SELECT y.VALOR_DESDE FROM miQuery y WHERE y.FILA = x.FILA AND y.ES_MEDIBLE = 1 AND y.ES_DESDE = 1 AND y.ES_HASTA = 0) AS VALOR_DESDE, (SELECT y.VALOR_DESDE FROM miQuery y WHERE y.FILA = x.FILA AND y.ES_MEDIBLE = 1 AND y.ES_HASTA = 1 AND y.ES_DESDE = 0) AS VALOR_HASTA, (SELECT y.VALOR_DESDE FROM miQuery y WHERE y.FILA = x.FILA AND y.ES_MEDIBLE = 1 AND y.ES_HASTA = 1 AND y.ES_DESDE = 1) AS VALOR_RANGO, (SELECT y.ID_ELEMENTO_CUERPO_PLANTILLA FROM miQuery y WHERE y.FILA = x.FILA AND y.RLTDO_CAMPO IS NOT NULL) AS ID_ELEMENTO_CUERPO_PLANTILLA, (SELECT y.SIGNO_RLTDO_CAMP FROM miQuery y WHERE y.FILA = x.FILA AND y.SIGNO_RLTDO_CAMP IS NOT NULL) AS SIGNO_RLTDO_CAMP, (SELECT y.RLTDO_CAMPO FROM miQuery y WHERE y.FILA = x.FILA AND y.RLTDO_CAMPO IS NOT NULL) AS RLTDO_CAMPO, (SELECT y.SIGNO_RLTDO_LABO FROM miQuery y WHERE y.FILA = x.FILA AND y.SIGNO_RLTDO_LABO IS NOT NULL) AS SIGNO_RLTDO_LABO, (SELECT y.RLTDO_LABORATORIO FROM miQuery y WHERE y.FILA = x.FILA AND y.RLTDO_LABORATORIO IS NOT NULL) AS RLTDO_LABORATORIO, (SELECT y.ID_DETALLE_ANALISIS FROM miQuery y WHERE y.FILA = x.FILA AND y.RLTDO_CAMPO IS NOT NULL) AS ID_DETALLE_ANALISIS /*, (SELECT y.ES_CRITICO FROM miQuery y WHERE y.FILA = x.FILA AND y.RESULTADO IS NOT NULL) AS ES_CRITICO */ FROM ( SELECT DISTINCT m.FILA, m.ORDEN, m.VALOR_DESDE, m.ID_ELEMENTO_CUERPO, m.ID_ELEMENTO_CUERPO_PLANTILLA, m.ES_MEDIBLE, m.ES_DESDE, m.ES_HASTA, m.ES_UMED, m.SIGNO_RLTDO_CAMP, m.RLTDO_CAMPO, m.SIGNO_RLTDO_LABO, m.RLTDO_LABORATORIO, m.ID_DETALLE_ANALISIS --,m.ES_CRITICO FROM miQuery m )x GROUP BY x.FILA; COMMIT; IF cElemenCuerpo%ISOPEN THEN CLOSE cElemenCuerpo; END IF; EXCEPTION WHEN OTHERS THEN IF cElemenCuerpo%ISOPEN THEN CLOSE cElemenCuerpo; END IF; IF cDetMuestra%ISOPEN THEN CLOSE cDetMuestra; END IF; IF cCabeceras%ISOPEN THEN CLOSE cCabeceras; END IF; ROLLBACK; RAISE_APPLICATION_ERROR(-20001,'OCURRIO UN ERROR EN PR_OBTENER_DET_MUESTRA - '||SQLCODE||' -ERROR- '||SQLERRM); END PR_OBTENER_DET_MUESTRA; PROCEDURE PR_ACTUALIZAR_DET_MUESTRA(vDetMuestraXML IN CLOB) AS cDetalles PCK_MUESTRAS.tipoDetMuestra; idDetalleAnalisis NUMBER; vResultadoCampo NUMBER; vResultadoLabo NUMBER; vSignoResultadoCampo VARCHAR(10); vSignoResultadoLabo VARCHAR(10); BEGIN SET TRANSACTION READ WRITE; OPEN cDetalles FOR WITH miQuery AS (SELECT XMLTYPE(vDetMuestraXML) datosXml FROM SYS.DUAL) SELECT x.idDetalleAnalisis, x.SignoResultadoCampo, x.ResultadoCampo, x.SignoResultadoLabo, x.ResultadoLabo FROM miQuery m CROSS JOIN XMLTABLE('/ArrayOfDetalleMuestra/DetalleMuestra' PASSING m.datosXml COLUMNS idDetalleAnalisis NUMBER(20) PATH 'Id_detalle_analisis', SignoResultadoCampo VARCHAR(10) PATH 'Signo_rltdo_camp', ResultadoCampo FLOAT PATH 'Rltdo_campo', SignoResultadoLabo VARCHAR(10) PATH 'Signo_rltdo_camp', ResultadoLabo FLOAT PATH 'Rltdo_labo') x; LOOP FETCH cDetalles INTO idDetalleAnalisis, vSignoResultadoCampo, vResultadoCampo, vSignoResultadoLabo, vResultadoLabo; EXIT WHEN cDetalles%NOTFOUND; UPDATE T_DETALLES_ANALISIS SET SIGNO_RLTDO_LABO = TRIM(REPLACE(REPLACE(vSignoResultadoLabo,'&lt;', '<'),'&gt;', '>')), RLTDO_LABORATORIO = vResultadoLabo, SIGNO_RLTDO_CAMP = TRIM(REPLACE(REPLACE(vSignoResultadoCampo,'&lt;', '<'),'&gt;', '>')), RLTDO_CAMPO = vResultadoCampo WHERE ID_DETALLE_ANALISIS = idDetalleAnalisis; END LOOP; CLOSE cDetalles; COMMIT; EXCEPTION WHEN OTHERS THEN IF cDetalles%ISOPEN THEN CLOSE cDetalles; END IF; ROLLBACK; RAISE_APPLICATION_ERROR(-20001,'OCURRIO UN ERROR EN PR_ACTUALIZAR_DET_MUESTRA - '||SQLCODE||' -ERROR- '||SQLERRM); END PR_ACTUALIZAR_DET_MUESTRA; PROCEDURE PR_OBTENER_TIPOS_SOLICITANTE(idMuestra IN NUMBER, cMuestra OUT PCK_MUESTRAS.tipoMuestra) AS BEGIN IF idMuestra <> -1 THEN OPEN cMuestra FOR SELECT ts.ID_TIPO_SOLICITANTE, ts.N_TIPO_SOLICITANTE, ts.HABILITADO FROM T_TIPOS_SOLICITANTE ts, T_MUESTRAS_ANALISIS tm WHERE ts.ID_TIPO_SOLICITANTE = tm.ID_TIPO_SOLICITANTE AND tm.ID_MUESTRA_ANALISIS = idMuestra AND ts.HABILITADO = 1 ORDER BY ts.N_TIPO_SOLICITANTE; ELSE OPEN cMuestra FOR SELECT ts.ID_TIPO_SOLICITANTE, ts.N_TIPO_SOLICITANTE, ts.HABILITADO FROM T_TIPOS_SOLICITANTE ts WHERE ts.HABILITADO = 1 ORDER BY ts.N_TIPO_SOLICITANTE; END IF; EXCEPTION WHEN OTHERS THEN IF cMuestra%ISOPEN THEN CLOSE cMuestra; END IF; RAISE_APPLICATION_ERROR(-20001,'OCURRIO UN ERROR EN PR_OBTENER_TIPOS_SOLICITANTE - '||SQLCODE||' -ERROR- '||SQLERRM); END PR_OBTENER_TIPOS_SOLICITANTE; PROCEDURE PR_FILTRAR_MUESTRA_CAMPANIA(vFechaDesde IN DATE, vFechaHasta IN DATE, idCampania IN NUMBER, idMuestra IN NUMBER, cMuestra OUT PCK_MUESTRAS.tipoMuestra) AS vFecDesde DATE := vFechaDesde; vFecHasta DATE := vFechaHasta; vAnio VARCHAR2(4); vFecDeStr VARCHAR(11); vFecHaStr VARCHAR(11); BEGIN SELECT TO_CHAR(SYSDATE, 'YYYY') INTO vAnio FROM SYS.DUAL; IF vFechaDesde IS NULL THEN --vFecDesde := sysdate - numtoyminterval(10,'year'); --Se filtran por el año en curso vFecDeStr := '01/' || '01/' || vAnio; vFecDesde := TO_DATE(vFecDeStr, 'DD/MM/YYYY'); END IF; IF vFechaHasta IS NULL THEN --vFecHasta := sysdate + numtoyminterval(10,'year'); --Se filtran por el año en curso vFecHaStr := '31/' || '12/' || vAnio; vFecHasta := TO_DATE(vFecHaStr, 'DD/MM/YYYY'); END IF; OPEN cMuestra FOR SELECT tma.ID_MUESTRA_ANALISIS, TO_CHAR(tma.FEC_EXTRACCION, 'DD/MM/YYYY') AS FECHA, tma.NRO, tma.PROGRAMADO, tma.TEMPERATURA, tma.PROF_MUESTRA_ANALISIS, TO_CHAR(tma.FEC_EXTRACCION, 'DD/MM/YYYY') AS FEC_EXTRACCION, TO_CHAR(tma.HS_EXTRACCION, 'HH24:MI') AS HS_EXTRACCION, tma.OBSERV_SITIO_EXTRACCION, tma.OBSERV_PROCEDENCIA, TO_CHAR(tma.FEC_RECEPCION, 'DD/MM/YYYY') AS FECHA_RECEPCION, tma.LAT, tma.LNG, tma.OBSERVACIONES, tma.OBSERV_FUENTE, tma.VISIBLE_LABORATORIO, te.ID_ESTADO, te.N_ESTADO, te.DESCRIPCION, tl.CUIT_LABORATORIO, pj.RAZON_SOCIAL, ts.ID_TIPO_SOLICITANTE, ts.N_TIPO_SOLICITANTE, ts.HABILITADO, tma.ID_PERSONA_EXTRACCION, tper.CUIL, tper.ID_SEXO, tper.NRO_DOCUMENTO, tper.PAI_COD_PAIS, tper.ID_NUMERO, PCK_USUARIOS.F_APELLIDO_PER(tper.ID_SEXO, tper.NRO_DOCUMENTO, tper.PAI_COD_PAIS, tper.ID_NUMERO) AS APELLIDO, PCK_USUARIOS.F_NOMBRE_PER(tper.ID_SEXO, tper.NRO_DOCUMENTO, tper.PAI_COD_PAIS, tper.ID_NUMERO) AS NOMBRE, loc.ID_LOCALIDAD, loc.N_LOCALIDAD, loc.ID_PROVINCIA, dto.ID_DEPARTAMENTO, dto.N_DEPARTAMENTO, -1 AS ID_TIPO_MUESTRA, '' AS N_TIPO_MUESTRA, -1 AS ID_DEST_EFLUENTE, '' AS N_DEST_EFLUENTE, tcam.ID_CAMPANIA, tcam.N_CAMPANIA, tcam.CANT_MUESTRAS, tcam.DER_CANT_MUESTRAS, tcam.DER_DETERMINACION, tcam.OBSERVACIONES, ttipocam.ID_TIPO_CAMPANIA, ttipocam.N_TIPO_CAMPANIA, ttipocondlleg.ID_TIPO_COND_LLEGA, ttipocondlleg.N_TIPO_COND_LLEGA, tsc.ID_SUBTIPO_CAMPANIA, tsc.N_SUBTIPO_CAMPANIA, tsc.ID_TIPO_CAMPANIA, tse.ID_SITIO_EXTRACCION, tse.N_SITIO_EXTRACCION, trec.ID_RECURSO_HIDRICO, trec.N_RECURSO_HIDRICO, trec.ID_SUBCUENCA, trec.N_SUBCUENCA, trec.ID_CUENCA, trec.N_CUENCA FROM T_MUESTRAS_ANALISIS tma, T_LABORATORIOS tl, T_TIPOS_SOLICITANTE ts, VT_PERSONAS tper, DOM_MANAGER.VT_LOCALIDADES loc, DOM_MANAGER.VT_DEPARTAMENTOS dto, T_COMUNES.VT_PERS_JURIDICAS_UNICA pj, T_ESTADOS_MUESTRA tem, T_ESTADOS te, --T_TIPOS_MUESTRA ttipomue, --T_DEST_EFLUENTE tdesef, T_CAMPANIAS tcam, T_TIPOS_CAMPANIA ttipocam, T_TIPOS_COND_LLEGA ttipocondlleg, T_SUBTIPOS_CAMPANIA tsc, T_SITIOS_EXTRACCION tse, T_SITIOS_MUESTRA tsm, T_COMUNES.VT_RECURSOS_HIDRICOS trec WHERE tma.CUIT_LABORATORIO = tl.CUIT_LABORATORIO (+) AND tl.CUIT_LABORATORIO = pj.CUIT (+) AND tma.ID_SUBTIPO_CAMPANIA = tsc.ID_SUBTIPO_CAMPANIA (+) AND tma.ID_MUESTRA_ANALISIS = tsm.ID_MUESTRA_ANALISIS (+) AND tsm.ID_SITIO_EXTRACCION = tse.ID_SITIO_EXTRACCION (+) AND tse.ID_RECURSO_HIDRICO = trec.ID_RECURSO_HIDRICO AND --tma.ID_TIPO_MUESTRA = ttipomue.ID_TIPO_MUESTRA AND --tma.ID_DEST_EFLUENTE = tdesef.ID_DEST_EFLUENTE AND tma.ID_TIPO_SOLICITANTE = ts.ID_TIPO_SOLICITANTE AND tma.ID_TIPO_COND_LLEGA = ttipocondlleg.ID_TIPO_COND_LLEGA AND tma.ID_CAMPANIA = tcam.ID_CAMPANIA AND tcam.ID_TIPO_CAMPANIA = ttipocam.ID_TIPO_CAMPANIA AND tma.ID_PERSONA_EXTRACCION = tper.ID_PERSONA AND tma.ID_LOC_PROCEDENCIA = loc.ID_LOCALIDAD AND loc.ID_DEPARTAMENTO = dto.ID_DEPARTAMENTO AND tma.ID_MUESTRA_ANALISIS = tem.ID_MUESTRA_ANALISIS AND tem.ID_ESTADO = te.ID_ESTADO AND tma.ID_CAMPANIA = idCampania AND (idMuestra IS NULL OR tma.ID_MUESTRA_ANALISIS <> idMuestra) AND tma.FEC_EXTRACCION BETWEEN vFecDesde AND vFecHasta ORDER BY tma.FEC_EXTRACCION, tma.HS_EXTRACCION; EXCEPTION WHEN OTHERS THEN IF cMuestra%ISOPEN THEN CLOSE cMuestra; END IF; RAISE_APPLICATION_ERROR(-20001,'OCURRIO UN ERROR EN PR_FILTRAR_MUESTRA_PRESTATARIA - '||SQLCODE||' -ERROR- '||SQLERRM); END PR_FILTRAR_MUESTRA_CAMPANIA; PROCEDURE PR_BORRAR_MUESTRA(idMuestra IN NUMBER) AS idMues NUMBER(10); BEGIN idMues := idMuestra; DELETE FROM T_ESTADOS_MUESTRA WHERE ID_MUESTRA_ANALISIS = idMues; /* UPDATE T_ARCHIVOS_MUESTRA SET FEC_BAJA = SYSDATE WHERE ID_MUESTRA_ANALISIS = idMues;*/ DELETE FROM T_ARCHIVOS_MUESTRA WHERE ID_MUESTRA_ANALISIS = idMues; DELETE FROM T_DETALLES_ANALISIS WHERE ID_MUESTRA_ANALISIS = idMues ; delete from T_HIST_MUESTRA where ID_MUESTRA_ANALISIS = idMues; delete from T_PLANTILLAS_MUESTRA where ID_MUESTRA_ANALISIS = idMues; delete from T_SITIOS_MUESTRA where ID_MUESTRA_ANALISIS = idMues; DELETE FROM T_MUESTRAS_ANALISIS WHERE ID_MUESTRA_ANALISIS = idMues ; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE_APPLICATION_ERROR(-20001,'OCURRIO UN ERROR EN PR_BORRAR_MUESTRA - '||SQLCODE||' -ERROR- '||SQLERRM); END PR_BORRAR_MUESTRA; 
PROCEDURE PR_EDITAR_MUESTRA(idMuestra IN OUT NUMBER, vNro IN NUMBER, vTemp IN NUMBER, idDestEfluente IN NUMBER, idTipoSolicitante IN NUMBER, vProf IN NUMBER, vFechaExt IN DATE, vHsExt IN DATE, idPersonaExt IN NUMBER, vCuilPerExt IN VARCHAR2, idSexoPerExt IN VARCHAR2, vDniPerExt IN VARCHAR2, vPaiCodPaisPerExt IN VARCHAR2, idNumeroPerExt IN NUMBER, vObservacSitioExt IN VARCHAR2, idCampania IN NUMBER, idLocalidadProced IN NUMBER, vObservacProced IN VARCHAR2, vProgramado IN NUMBER, idTipoCondLlegada IN NUMBER, vFechaRecepcion IN DATE, vLat IN VARCHAR2, vLng IN VARCHAR2, vObservac IN VARCHAR2, vObservacFuente IN VARCHAR2, vVisibleLabo IN NUMBER, vCuitLabo IN VARCHAR2, vEstadoMuestra IN VARCHAR2, vCuilModifica IN VARCHAR2, idSubtipoCampania IN NUMBER, idSitioExtraccion IN NUMBER) AS idPerExt INTEGER; idEstado NUMBER; idEstadoMuestra NUMBER; idDestEfluenteOtro NUMBER; vNombreEstado VARCHAR2(20); vDescEstado VARCHAR2(200); tabla_estados_no_cargada EXCEPTION; tabla_destino_eflu_no_cargada EXCEPTION; BEGIN SET TRANSACTION READ WRITE; BEGIN SELECT tde.ID_DEST_EFLUENTE INTO idDestEfluenteOtro FROM T_DEST_EFLUENTE tde WHERE TRIM(UPPER(tde.N_DEST_EFLUENTE)) = 'OTRO'; EXCEPTION WHEN NO_DATA_FOUND THEN idDestEfluenteOtro := -1; RAISE tabla_destino_eflu_no_cargada; END; BEGIN SELECT DISTINCT te.ID_ESTADO, te.N_ESTADO, te.DESCRIPCION INTO idEstado, vNombreEstado, vDescEstado FROM T_ESTADOS te WHERE te.N_ESTADO LIKE UPPER(TRIM(vEstadoMuestra)); EXCEPTION WHEN NO_DATA_FOUND THEN idEstado := -1; vNombreEstado := NULL; vDescEstado := NULL; RAISE tabla_estados_no_cargada; END; --Verifico si la persona que extrajo esta en nuestra tabla persona, sino esta la inserto BEGIN SELECT DISTINCT tper.ID_PERSONA INTO idPerExt FROM T_PERSONAS tper WHERE tper.NRO_DOCUMENTO = vDniPerExt AND tper.ID_SEXO = idPersonaExt AND tper.PAI_COD_PAIS = vPaiCodPaisPerExt; EXCEPTION WHEN NO_DATA_FOUND THEN idPerExt := SEQ_PERSONAS.NEXTVAL; -- INSERT INTO T_PERSONAS(ID_PERSONA, CUIL, ID_SEXO, NRO_DOCUMENTO, PAI_COD_PAIS, ID_NUMERO) -- VALUES(idPerExt, vCuilPerExt, idSexoPerExt, vDniPerExt, vPaiCodPaisPerExt, idNumeroPerExt); INSERT INTO T_PERSONAS(ID_PERSONA, ID_SEXO, NRO_DOCUMENTO, PAI_COD_PAIS, ID_NUMERO) VALUES(idPerExt, idSexoPerExt, vDniPerExt, vPaiCodPaisPerExt, idNumeroPerExt); END; IF idMuestra > -1 THEN UPDATE T_MUESTRAS_ANALISIS ma SET -- ma.ID_TIPO_MUESTRA = idTipoMuestra, ma.NRO = vNro, ma.TEMPERATURA = vTemp, ma.ID_DEST_EFLUENTE = idDestEfluenteOtro, ma.ID_TIPO_SOLICITANTE = idTipoSolicitante, ma.PROF_MUESTRA_ANALISIS = vProf, ma.FEC_EXTRACCION = vFechaExt, ma.HS_EXTRACCION = vHsExt, ma.ID_PERSONA_EXTRACCION = idPerExt, ma.OBSERV_SITIO_EXTRACCION = UPPER(TRIM(vObservacSitioExt)), ma.ID_CAMPANIA = idCampania, ma.ID_LOC_PROCEDENCIA = idLocalidadProced, ma.ID_SUBTIPO_CAMPANIA = idSubtipoCampania, ma.OBSERV_PROCEDENCIA = UPPER(TRIM(vObservacProced)), ma.PROGRAMADO = vProgramado, ma.ID_TIPO_COND_LLEGA = idTipoCondLlegada, ma.FEC_RECEPCION = vFechaRecepcion, ma.LAT = vLat, ma.LNG = vLng, ma.OBSERVACIONES = UPPER(TRIM(vObservac)), ma.OBSERV_FUENTE = UPPER(TRIM(vObservacFuente)), ma.VISIBLE_LABORATORIO = vVisibleLabo, ma.CUIT_LABORATORIO = vCuitLabo WHERE ma.ID_MUESTRA_ANALISIS = idMuestra; UPDATE T_ESTADOS_MUESTRA tem SET tem.ID_ESTADO = idEstado WHERE tem.ID_MUESTRA_ANALISIS = idMuestra; ELSE idMuestra := SEQ_MUESTRAS_ANALISIS.NEXTVAL; -- ID_TIPO_MUESTRA,idTipoMuestra, INSERT INTO T_MUESTRAS_ANALISIS(ID_MUESTRA_ANALISIS, NRO, TEMPERATURA, ID_DEST_EFLUENTE, ID_TIPO_SOLICITANTE, PROF_MUESTRA_ANALISIS, FEC_EXTRACCION, HS_EXTRACCION, ID_PERSONA_EXTRACCION, OBSERV_SITIO_EXTRACCION, ID_CAMPANIA, ID_LOC_PROCEDENCIA, OBSERV_PROCEDENCIA, PROGRAMADO, ID_TIPO_COND_LLEGA, FEC_RECEPCION, LAT, LNG, OBSERVACIONES, OBSERV_FUENTE, VISIBLE_LABORATORIO, CUIT_LABORATORIO, ID_SUBTIPO_CAMPANIA) VALUES (idMuestra, vNro, vTemp, idDestEfluenteOtro, idTipoSolicitante, vProf, vFechaExt, vHsExt, idPerExt, UPPER(TRIM(vObservacSitioExt)), idCampania, idLocalidadProced, UPPER(TRIM(vObservacProced)), vProgramado, idTipoCondLlegada, vFechaRecepcion, vLat, vLng, UPPER(TRIM(vObservac)), UPPER(TRIM(vObservacFuente)), vVisibleLabo, vCuitLabo, idSubtipoCampania); idEstadoMuestra := SEQ_ESTADOS_MUESTRA.NEXTVAL; INSERT INTO T_ESTADOS_MUESTRA(ID_ESTADO_MUESTRA, ID_ESTADO, ID_MUESTRA_ANALISIS) VALUES (idEstadoMuestra, idEstado, idMuestra); END IF; DELETE FROM T_SITIOS_MUESTRA WHERE ID_MUESTRA_ANALISIS = idMuestra; INSERT INTO T_SITIOS_MUESTRA(ID_SITIO_MUESTRA, ID_MUESTRA_ANALISIS, ID_SITIO_EXTRACCION) VALUES (SEQ_SITIOS_MUESTRA.NEXTVAL, idMuestra, idSitioExtraccion); --INSERTAMOS EN EL HISTORICO DE MUESTRAS DE ANALISIS INSERT INTO T_HIST_MUESTRA(ID_HIST_MUESTRA, ID_MUESTRA_ANALISIS, FEC_MODIF, ID_USUARIO) VALUES(SEQ_HIST_MUESTRA.NEXTVAL, idMuestra, SYSDATE, vCuilModifica); COMMIT; EXCEPTION WHEN tabla_estados_no_cargada THEN ROLLBACK; RAISE_APPLICATION_ERROR(-20002,'OCURRIO UN ERROR EN PR_EDITAR_MUESTRA (TABLA ESTADOS NO CARGADA) - '||SQLCODE||' -ERROR- '||SQLERRM); WHEN tabla_destino_eflu_no_cargada THEN ROLLBACK; RAISE_APPLICATION_ERROR(-20002,'OCURRIO UN ERROR EN PR_EDITAR_MUESTRA (TABLA DEST_EFLUENTE NO CARGADA) - '||SQLCODE||' -ERROR- '||SQLERRM); WHEN OTHERS THEN ROLLBACK; RAISE_APPLICATION_ERROR(-20001,'OCURRIO UN ERROR EN PR_EDITAR_MUESTRA - '||SQLCODE||' -ERROR- '||SQLERRM); 
END PR_EDITAR_MUESTRA; 

PROCEDURE PR_BUSCAR_DOCUMENTOS(idMuestra IN NUMBER, cDocs OUT PCK_MUESTRAS.tipoDocs) AS idMues NUMBER(10); BEGIN idMues := idMuestra; OPEN cDocs FOR SELECT arc.ID_ARCHIVO, arc.N_ARCHIVO, TO_CHAR(arcmue.FEC_ALTA, 'DD/MM/YYYY') AS FEC_ALTA, TO_CHAR(arcmue.FEC_BAJA, 'DD/MM/YYYY') AS FEC_BAJA, arc.COD_CDD, arc.N_COD_CDD, arc.ID_DOC_CDD FROM T_ARCHIVOS arc, T_ARCHIVOS_MUESTRA arcmue WHERE arc.ID_ARCHIVO = arcmue.ID_ARCHIVO AND arcmue.ID_MUESTRA_ANALISIS = idMuestra AND arcmue.FEC_BAJA IS NULL ORDER BY arcmue.FEC_ALTA DESC; EXCEPTION WHEN OTHERS THEN RAISE_APPLICATION_ERROR(-20001,'OCURRIO UN ERROR EN PR_BUSCAR_DOCUMENTOS - '||SQLCODE||' -ERROR- '||SQLERRM); END PR_BUSCAR_DOCUMENTOS; PROCEDURE PR_ACTUALIZAR_DOC_CDD(idMuestra IN NUMBER, idDocumento IN NUMBER, vCodCdd IN NUMBER, vNcodCdd IN VARCHAR2, vNarchivo IN VARCHAR2) AS idDoc NUMBER(10); codCdd NUMBER(10); nArchivo VARCHAR(1000); idMues NUMBER(10); nCodCdd VARCHAR2(1000); idArch NUMBER(10); idArchMue NUMBER(10); BEGIN idDoc := idDocumento; codCdd := vCodCdd; nArchivo := vNarchivo; idMues := idMuestra; nCodCdd := vNcodCdd; /*BEGIN SELECT arc.ID_ARCHIVO, arcmue.ID_ARCHIVO_MUESTRA INTO idArch, idArchMue FROM T_ARCHIVOS arc, T_ARCHIVOS_MUESTRA arcmue WHERE arc.ID_ARCHIVO = arcmue.ID_ARCHIVO AND arcmue.ID_MUESTRA_ANALISIS = idMues AND arc.COD_CDD = codCdd AND arcmue.FEC_BAJA IS NOT NULL; UPDATE T_ARCHIVOS arc SET arc.ID_DOC_CDD = idDoc, arc.N_ARCHIVO = nArchivo WHERE arc.ID_ARCHIVO = idArch; UPDATE T_ARCHIVOS_MUESTRA arcmue SET arcmue.FEC_ALTA = SYSDATE WHERE arcmue.ID_ARCHIVO_MUESTRA = idArchMue; EXCEPTION WHEN NO_DATA_FOUND THEN*/ idArch := SEQ_ARCHIVOS.NEXTVAL; idArchMue := SEQ_ARCHIVOS_MUESTRA.NEXTVAL; INSERT INTO T_ARCHIVOS(ID_ARCHIVO, ID_DOC_CDD, N_ARCHIVO, FEC_ALTA, COD_CDD, N_COD_CDD) VALUES(idArch, idDoc, nArchivo, SYSDATE, codCdd, nCodCdd); INSERT INTO T_ARCHIVOS_MUESTRA(ID_ARCHIVO_MUESTRA, ID_MUESTRA_ANALISIS, ID_ARCHIVO, FEC_ALTA) VALUES(idArchMue, idMues, idArch, SYSDATE); --END; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE_APPLICATION_ERROR(-20001,'OCURRIO UN ERROR EN PR_ACTUALIZAR_DOC_CDD - '||SQLCODE||' -ERROR- '||SQLERRM); END PR_ACTUALIZAR_DOC_CDD; PROCEDURE PR_BORRAR_DOC_CDD(idArchivo IN NUMBER) AS idArch NUMBER(10); BEGIN idArch := idArchivo; UPDATE T_ARCHIVOS_MUESTRA arcmue SET arcmue.FEC_BAJA = SYSDATE WHERE arcmue.ID_ARCHIVO = idArch; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE_APPLICATION_ERROR(-20001,'OCURRIO UN ERROR EN PR_BORRAR_DOC_CDD - '||SQLCODE||' -ERROR- '||SQLERRM); END PR_BORRAR_DOC_CDD; END PCK_MUESTRAS;